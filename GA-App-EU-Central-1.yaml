AWSTemplateFormatVersion: "2010-09-09"
Description: "Illumio CS Free Trial"
Resources:
#-----ACME VPC and subnet creation-----
  ACMEVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "ACME-VPC1"

  ProdSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref ACMEVPC1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Production Subnet"

  DevSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.0.3.0/24"
      VpcId: !Ref ACMEVPC1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Dev Subnet"

#-----ACME VPC and subnet creation-----
  ACMEVPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "ACME-VPC2"

  StagingSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.1.2.0/24"
      VpcId: !Ref ACMEVPC2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Staging Subnet"

#--------VPC peering------------------

  vpcPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref ACMEVPC1
      PeerVpcId: !Ref ACMEVPC2

#-------S3 Bucket and Flow Logs-------

  S3bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub "${AWS::Region}-${AWS::AccountId}"

  Flowlogs1: 
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref ACMEVPC1
      ResourceType: VPC
      LogDestination: !GetAtt S3bucket.Arn
      LogDestinationType: s3
      TrafficType: ALL
      Tags:
        - Key: "Name"
          Value: "Flow-logs1"

  Flowlogs2: 
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref ACMEVPC2
      ResourceType: VPC
      LogDestination: !GetAtt S3bucket.Arn
      LogDestinationType: s3
      TrafficType: ALL
      Tags:
        - Key: "Name"
          Value: "Flow-logs2"


#------Internet gateway----------
  ACMEIG:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: "Name"
          Value: "InternetGateway"

  ACMEIG2:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: "Name"
          Value: "InternetGateway"

  AttachIG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref ACMEIG
      VpcId: !Ref ACMEVPC1

  AttachIG2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref ACMEIG2
      VpcId: !Ref ACMEVPC2


#------NAT Gateway------------
  ACMENG:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ACMENGEIP.AllocationId
      SubnetId: !Ref ProdSubnet
      Tags:
      - Key: "Name"
        Value: "NATGateway"

  ACMENGEIP:
    DependsOn: ACMEVPC1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

#  ACMENG2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt ACMENGEIP.AllocationId
#      SubnetId: !Ref StagingSubnet
#      Tags:
#      - Key: "Name"
#        Value: "NATGateway"

#  ACMENGEIP2:
#    DependsOn: ACMEVPC2
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc

#-----Public Route--------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ACMEVPC1
      Tags:
      - Key: "Name"
        Value: "PublicRouteTable"

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn:
         - AttachIG
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ACMEIG 

  PublicSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ProdSubnet

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ACMEVPC2
      Tags:
      - Key: "Name"
        Value: "PublicRouteTable2"

  PublicRoute2:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn:
         - AttachIG2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ACMEIG2 

  PublicSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref StagingSubnet

#---------Private Routes-----------
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ACMEVPC1
      Tags:
      - Key: "Name"
        Value: "PrivateRouteTable"

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref ACMENG

  PrivateAppSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DevSubnet

#  PrivateAppSubnetRouteAssociation2:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties: 
#      RouteTableId: !Ref PrivateRouteTable
#      SubnetId: !Ref StagingSubnet

#----------VPC Endpoint-------------------

  EC2DynamoDBVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Gateway"
      VpcId: !Ref ACMEVPC1
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      RouteTableIds: 
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      PrivateDnsEnabled: false

  PrivateAPIGatewayEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref ACMEVPC1
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds: 
        - !Ref DevSubnet
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref PublicWebSG

#------------Apps within Prod Subnet----------------
#------------Ecomm web app------------------
  ECommWeb1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      IamInstanceProfile: !Ref EC2DynamoDBInstanceProfile
      SecurityGroupIds: 
        - !Ref PublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "Ecomm"
      - Key: "Name"
        Value: "Ecomm-Prod-Web1"
      - Key: "Role"
        Value: "Web"
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          python3 /home/ec2-user/createtable.py
          sleep 30
          python3 /home/ec2-user/Add_multiple_items.py
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${ECommProc1.PrivateIp} 80 -t 10 >> /tmp/Web1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${ECommProc2.PrivateIp} 80 -t 10 >> /tmp/Web2.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "*/5 * * * *  python3 /home/ec2-user/dynamoscan.py >> /tmp/dynamoscan.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "*/30 * * * *  python3 /home/ec2-user/Add_multiple_items.py >> /tmp/add_items.log") | crontab -
          aws apigateway update-rest-api --rest-api-id ${querytableAPIGateway.RestApiId} --patch-operations op=replace,path=/policy,value='"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${querytableAPIGateway.RestApiId}\\/*\\\"},{\\\"Effect\\\":\\\"Deny\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${querytableAPIGateway.RestApiId}\\/*\\\",\\\"Condition\\\":{\\\"StringNotEquals\\\":{\\\"aws:SourceVpce\\\":\\\"${PrivateAPIGatewayEndpoint.Id}\\\"}}}]}"' >> /tmp/updatresourcepolicy.log
          sleep 30
          aws apigateway create-deployment --rest-api-id ${querytableAPIGateway.RestApiId} --region ${AWS::Region} --stage-name query >> /tmp/deployment.log
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  curl https://${querytableAPIGateway.RestApiId}.execute-api.${AWS::Region}.amazonaws.com/query >> /tmp/queryAPI.log") | crontab -
    DependsOn:     
      - querytableApiGatewayDeployment

#------------Ecomm proc tier ------------------
  ECommProc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${EcommRDS.Endpoint.Address} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "Ecomm"
      - Key: "Name"
        Value: "Ecomm-Prod-Proc1"
      - Key: "Role"
        Value: "Proc"

  ECommProc2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${EcommRDS.Endpoint.Address} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "Ecomm"
      - Key: "Name"
        Value: "Ecomm-Prod-Proc2"
      - Key: "Role"
        Value: "Proc"

#-------------Ecomm-RDS----------------

  EcommRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: "Ecomm-RDS"
      AllocatedStorage: 20
      DBInstanceClass: "db.t2.micro"
      Engine: "mysql"
      MasterUsername: "admin"
      MasterUserPassword: "Illumio123"
      BackupRetentionPeriod: 1
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      MultiAZ: false
      EngineVersion: "8.0.34"
      AutoMinorVersionUpgrade: true
      LicenseModel: "general-public-license"
      PubliclyAccessible: false
      StorageType: "gp2"
      Port: 3306
      StorageEncrypted: false
      CopyTagsToSnapshot: true
      MonitoringInterval: 0
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      DeletionProtection: false
      DBSubnetGroupName: !Sub "default-${ACMEVPC1}"
      VPCSecurityGroups: 
        - !Ref ProdDBPrivateSG
      MaxAllocatedStorage: 1000
      DBParameterGroupName: "default.mysql8.0"
      OptionGroupName: "default:mysql-8-0"
      CACertificateIdentifier: "rds-ca-2019"
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "Ecomm"
      - Key: "Name"
        Value: "Ecomm-Prod-DB"
      - Key: "Role"
        Value: "DB"
    DependsOn:
         - RDSDBSubnetGroup

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Created from the RDS Management Console"
      DBSubnetGroupName: !Sub "default-${ACMEVPC1}"
      SubnetIds: 
        - !Ref ProdSubnet
        - !Ref DevSubnet

#------------CRM Prod App--------------------------------
#------------CRMEC2Web------------------------------

  CRMEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2Proc2.PrivateIp} 5000 -t 10 >> /tmp/Proc2.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "CRM"
      - Key: "Name"
        Value: "CRM-Prod-Web1"
      - Key: "Role"
        Value: "web"

  CRMEC2Web2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2Proc2.PrivateIp} 5000 -t 10 >> /tmp/Proc2.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2Web1.PrivateIp} 80 -t 10 >> /tmp/Web1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/FinProc2.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "CRM"
      - Key: "Name"
        Value: "CRM-Prod-Web2"
      - Key: "Role"
        Value: "web"

#------------CRMEC2ProcTiers------------------
  CRMEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "CRM"
      - Key: "Name"
        Value: "CRM-Prod-Proc1"
      - Key: "Role"
        Value: "proc"

  CRMEC2Proc2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "CRM"
      - Key: "Name"
        Value: "CRM-Prod-Proc2"
      - Key: "Role"
        Value: "proc"


#-------------CRM DB------------------

  CRMEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "Asset"
        Value: "CRM"
      - Key: "Name"
        Value: "CRM-Prod-DB1"
      - Key: "Risk"
        Value: "High"
      - Key: "Role"
        Value: "db"

#------------Finance App----------------------
#------------Finance EC2Web------------------
  FinanceEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "Finance"
      - Key: "APP-ID"
        Value: "Fin-001"
      - Key: "Name"
        Value: "Finance-Prod-Web1"
      - Key: "Role"
        Value: "web"

  FinanceEC2Web2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "Finance"
      - Key: "APP-ID"
        Value: "Fin-001"
      - Key: "Name"
        Value: "Finance-Prod-Web2"
      - Key: "Role"
        Value: "web"

#------------Finance EC2ProcTiers------------------
  FinanceEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2DB2.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "Finance"
      - Key: "APP-ID"
        Value: "Fin-002"
      - Key: "Name"
        Value: "Finance-Prod-Proc1"
      - Key: "Role"
        Value: "proc"

#------------Finance EC2DBTiers------------------
  FinanceEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "Finance"
      - Key: "APP-ID"
        Value: "Fin-002"
      - Key: "Name"
        Value: "Finance-Prod-DB1"
      - Key: "Risk"
        Value: "High"
      - Key: "Role"
        Value: "db"

  FinanceEC2DB2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "Finance"
      - Key: "APP-ID"
        Value: "Fin-002"
      - Key: "Name"
        Value: "Finance-Prod-DB2"
      - Key: "Risk"
        Value: "High"
      - Key: "Role"
        Value: "db"

#------------POS App----------------------
#------------POS EC2Web------------------
  POSEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-001-001"
      - Key: "Name"
        Value: "POS-Prod-Web1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Role"
        Value: "web"

#------------POS EC2ProcTiers------------------
  POSEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-001-002"
      - Key: "Name"
        Value: "POS-Prod-Proc1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Role"
        Value: "proc"

#------------- POS DB----------------

  POSEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt ProdSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref ProdSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref ProdDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Prod"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-001-003"
      - Key: "Name"
        Value: "POS-Prod-DB1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Risk"
        Value: "High"
      - Key: "Role"
        Value: "db"

#---------Prod Security groups----------

  ProdWebSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Prod PublicWebSG "
      GroupName: "ProdWebTierSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  ProdAppPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Prod AppPrivateSG "
      GroupName: "ProdAppPrivateSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  ProdDBPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Prod DBPrivateSG "
      GroupName: "ProdDBPrivateSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  PublicWebSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "PublicWebSG for EC2Client"
      VpcId: !Ref ACMEVPC1
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

#---------Apps within Dev Subnet-------------
#------------POS Dev App----------------------
#------------POS Dev EC2Web------------------
  POSDevEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevPublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSDevEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet dropbox.com 443 -t 10 >> /tmp/dropbox.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-002-001"
      - Key: "Name"
        Value: "POS-Dev-Web1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Role"
        Value: "web"

#------------POS Dev EC2ProcTiers------------------
  POSDevEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSDevEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-002-002"
      - Key: "Name"
        Value: "POS-Dev-Proc1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Role"
        Value: "proc"

#------------- POS Dev Database----------------

  POSDevEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "POS"
      - Key: "Resource-ID"
        Value: "POS-002-003"
      - Key: "Name"
        Value: "POS-Dev-DB1"
      - Key: "Compliance"
        Value: "PCI"
      - Key: "Role"
        Value: "db"

#-------------HR App--------------
#------------HR Dev app-----------

  HRDevEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevPublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${HRDevEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet dropbox.com 443 -t 10 >> /tmp/dropbox.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "HR"
      - Key: "App-ID"
        Value: "HR-002-001"
      - Key: "Name"
        Value: "HR-Dev-Web1"
      - Key: "Role"
        Value: "web"

#------------HR Dev EC2ProcTiers------------------
  HRDevEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${HRDevEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "HR"
      - Key: "App-ID"
        Value: "HR-002-002"
      - Key: "Name"
        Value: "HR-Dev-Proc1"
      - Key: "Role"
        Value: "proc"

#------------- HR Dev Database----------------

  HRDevEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "HR"
      - Key: "App-ID"
        Value: "HR-002-003"
      - Key: "Name"
        Value: "HR-Dev-DB1"
      - Key: "Role"
        Value: "db"

#-------------Fin Dev App--------------
#------------Fin Dev app-----------

  FinDevEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevPublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinDevEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${POSEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-002-001"
      - Key: "Name"
        Value: "Fin-Dev-Web1"
      - Key: "Role"
        Value: "web"

#------------Fin Dev EC2ProcTiers------------------
  FinDevEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinDevEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-002-002"
      - Key: "Name"
        Value: "Fin-Dev-Proc1"
      - Key: "Role"
        Value: "proc"

#------------- Finance Dev Database----------------

  FinDevEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt DevSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref DevSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref DevDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Dev"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-002-002"
      - Key: "Name"
        Value: "Fin-Dev-DB1"
      - Key: "Role"
        Value: "db"

#--------- Dev Security groups----------

  DevPublicWebSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "HR Dev PublicWebSG "
      GroupName: "DevWebTierSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  DevAppPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Dev AppPrivateSG "
      GroupName: "DevAppPrivateSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  DevDBPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Dev DBPrivateSG "
      GroupName: "DevDBPrivateSG"
      VpcId: !Ref ACMEVPC1
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

#---------Apps within Staging Subnet-------------
#------------CRM Staging App----------------------
#------------CRM Staging EC2Web------------------

  CRMStagingEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false

      SecurityGroupIds: 
        - !Ref StagingPublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMStagingEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet dropbox.com 443 -t 10 >> /tmp/dropbox.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "CRM"
      - Key: "Resource-ID"
        Value: "CRM-003-001"
      - Key: "Name"
        Value: "CRM-Staging-Web1"
      - Key: "Role"
        Value: "web"

#------------CRM Staging EC2ProcTiers------------------
  CRMStagingEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref StagingAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMStagingEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "CRM"
      - Key: "Resource-ID"
        Value: "CRM-003-002"
      - Key: "Name"
        Value: "CRM-Staging-Proc1"
      - Key: "Role"
        Value: "proc"

#------------- CRM Staging Database----------------

  CRMStagingEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref StagingDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinanceEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "CRM"
      - Key: "Resource-ID"
        Value: "CRM-003-003"
      - Key: "Name"
        Value: "CRM-Staging-DB1"
      - Key: "Role"
        Value: "db"

#-----------Fin Staging App----------------------
#------------Fin Staging EC2Web------------------

  FinStagingEC2Web1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref StagingPublicWebSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          sudo yum install python3-pip -y
          sudo pip3 install boto3
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Complex/createtable.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/Add_multiple_items.py -P /home/ec2-user
          wget https://raw.githubusercontent.com/HerbyJ3/python_projects/main/Week14/dynamoscan.py -P /home/ec2-user
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinStagingEC2Proc1.PrivateIp} 5000 -t 10 >> /tmp/Proc1.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet dropbox.com 443 -t 10 >> /tmp/dropbox.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-003-001"
      - Key: "Name"
        Value: "Fin-Staging-Web1"
      - Key: "Role"
        Value: "web"

#------------Fin Staging EC2ProcTiers------------------
  FinStagingEC2Proc1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref StagingAppPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 5000; done &
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${FinStagingEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
          (crontab -l 2>/dev/null || echo ""; echo "* * * * *  telnet ${CRMEC2DB1.PrivateIp} 3306 -t 10 >> /tmp/DB.log") | crontab -
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-003-002"
      - Key: "Name"
        Value: "Fin-Staging-Proc1"
      - Key: "Role"
        Value: "proc"

#------------- Fin Staging Database----------------

  FinStagingEC2DB1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0669b163befffbdfc"
      InstanceType: "t2.micro"
#      KeyName: "freetrial"
      AvailabilityZone: !GetAtt StagingSubnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref StagingSubnet
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref StagingDBPrivateSG
      SourceDestCheck: true
      HibernationOptions: 
        Configured: false
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemct enable httpd
          sudo yum install telnet -y
          sudo yum install cronie -y
          sudo yum install nc -y
          sudo yum install python3-pip -y
          pip3 install boto3
          pip install amazon-dax-client
          wget http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/samples/TryDax.zip
          unzip TryDax.zip
          sudo systemctl enable crond.service
          sudo systemctl start crond.service
          while true; do nc -l -p 3306; done &
      Tags:
      - Key: "Env"
        Value: "Staging"
      - Key: "App"
        Value: "Finance"
      - Key: "Resource-ID"
        Value: "Fin-003-003"
      - Key: "Name"
        Value: "Fin-Staging-DB1"
      - Key: "Role"
        Value: "db"

#---------Staging Security groups----------

  StagingPublicWebSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Staging PublicWebSG "
      GroupName: "StagingWebTierSG"
      VpcId: !Ref ACMEVPC2
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  StagingAppPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Staging AppPrivateSG "
      GroupName: "StagingAppPrivateSG"
      VpcId: !Ref ACMEVPC2
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

  StagingDBPrivateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Staging DBPrivateSG "
      GroupName: "StagingDBPrivateSG"
      VpcId: !Ref ACMEVPC2
#      SecurityGroupIngress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"
#      SecurityGroupEgress: 
#        - 
#          CidrIp: "0.0.0.0/0"
#          IpProtocol: "-1"

#-----------IAM Roles for EC2, Dynamo DB and Lambda--------------

  EC2DynamoDBRoleCentral:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "EC2DynamoDBCentral"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
      Description: "Allows EC2 instances to call AWS services on your behalf."

  EC2DynamoDBInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      InstanceProfileName: !Ref EC2DynamoDBRoleCentral
      Roles: 
        - !Ref EC2DynamoDBRoleCentral

  LambdaDynamoDBRoleCentral:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "LambdaDynamoDBCentral"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      Description: "Allows Lambda functions to call AWS services on your behalf."

#--------Lambda Functions------------------

  returnanitemlambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "return_an_item"
      Handler: "index.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 128
      Role: !GetAtt LambdaDynamoDBRoleCentral.Arn
      Runtime: "python3.11"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
      VpcConfig: 
        SubnetIds: 
          - !Ref ProdSubnet
        SecurityGroupIds: 
          - !Ref ProdAppPrivateSG
      EphemeralStorage: 
        Size: 512
      Code: 
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
            dynamodb = boto3.resource('dynamodb', region_name="${AWS::Region}")
            table = dynamodb.Table('My_Favorite_Movies')
            response = table.get_item(
              Key={
                'year': '2005',
                'title': 'Constantine'
              }
              )
            item = response['Item']
            return item

  deleteanitemlambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "delete_an_item"
      Handler: "index.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 128
      Role: !GetAtt LambdaDynamoDBRoleCentral.Arn
      Runtime: "python3.11"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
      VpcConfig: 
        SubnetIds: 
          - !Ref ProdSubnet
        SecurityGroupIds: 
          - !Ref ProdAppPrivateSG
      EphemeralStorage: 
        Size: 512
      Code: 
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
            dynamodb = boto3.resource('dynamodb', region_name="${AWS::Region}")
            table = dynamodb.Table('My_Favorite_Movies')
            remove = table.delete_item(
              Key={
                'year': '1999',
                'title': 'The Matrix'
              }
            ) 
            return remove       

  queryatablelambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "query_a_table"
      Handler: "index.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 128
      Role: !GetAtt LambdaDynamoDBRoleCentral.Arn
      Runtime: "python3.11"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
      VpcConfig: 
        SubnetIds: 
          - !Ref ProdSubnet
        SecurityGroupIds: 
          - !Ref ProdAppPrivateSG
      EphemeralStorage: 
        Size: 512
      Code: 
        ZipFile: !Sub |
          import boto3
          from boto3.dynamodb.conditions import Key, Attr
          def lambda_handler(event, context):
            dynamodb = boto3.resource('dynamodb', region_name="${AWS::Region}")
            table = dynamodb.Table('My_Favorite_Movies')
            response = table.query(
            KeyConditionExpression=Key('year').eq('1997')
            )
            items = response['Items']
            return items

#------------Lambda Permissions---------------------
#------Permissions for API gateway to invoke lambda---------

#  queryatablelambdapermission:
#    Type: "AWS::Lambda::Permission"
#    Properties:
#      Action: "lambda:InvokeFunction"
#      FunctionName: !GetAtt queryatablelambda.Arn
#      Principal: "apigateway.amazonaws.com"
#      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${querytableAPIGateway}/*/GET/"

#  returnatablelambdapermission:
#    Type: "AWS::Lambda::Permission"
#    Properties:
#      Action: "lambda:InvokeFunction"
#      FunctionName: !GetAtt returnanitemlambda.Arn
#      Principal: "apigateway.amazonaws.com"
#      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${querytableAPIGateway}/*/GET/return"

  returnatablelambdapermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: querytableAPIGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref returnanitemlambda
      Principal: apigateway.amazonaws.com

  deletetablelambdapermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: querytableAPIGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref deleteanitemlambda
      Principal: apigateway.amazonaws.com

  queryatablelambdapermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: querytableAPIGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref queryatablelambda
      Principal: apigateway.amazonaws.com

#--------API Gateway------------------------
#-------hardcoded values of lambda fuctions in the methods---
#----If lambda changes, please change the method URI----

  querytableAPIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "query_a_table_API"
      ApiKeySourceType: "HEADER"
      Policy: !Sub "{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"arn:aws:execute-api:\\/*\\\"},{\\\"Effect\\\":\\\"Deny\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"arn:aws:execute-api:\\/*\\\",\\\"Condition\\\":{\\\"StringNotEquals\\\":{\\\"aws:SourceVpce\\\":\\\"${PrivateAPIGatewayEndpoint.Id}\\\"}}}]}"
      EndpointConfiguration: 
        Types: 
          - "PRIVATE"
        VpcEndpointIds: 
          - !Ref PrivateAPIGatewayEndpoint

  deleteGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      PathPart: "delete"
      ParentId: !GetAtt querytableAPIGateway.RootResourceId

  returnGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      PathPart: "return"
      ParentId: !GetAtt querytableAPIGateway.RootResourceId

  getqueryGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      ResourceId: !GetAtt querytableAPIGateway.RootResourceId
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
        - 
          ResponseModels: 
            "application/json": "Empty"
          StatusCode: "200"
      Integration: 
        CacheNamespace: !GetAtt querytableAPIGateway.RootResourceId
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
          - 
            ResponseTemplates: {}
            StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${queryatablelambda.Arn}/invocations"

  deleteGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      ResourceId: !Ref deleteGatewayResource
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
        - 
          ResponseModels: 
            "application/json": "Empty"
          StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref deleteGatewayResource
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
          - 
            ResponseTemplates: {}
            StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteanitemlambda.Arn}/invocations"

  getreturnGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      ResourceId: !Ref returnGatewayResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
        - 
          ResponseModels: 
            "application/json": "Empty"
          StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref returnGatewayResource
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
          - 
            ResponseTemplates: {}
            StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${returnanitemlambda.Arn}/invocations"

  querytableApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref querytableAPIGateway
      StageName: "query"
    DependsOn:
       - getqueryGatewayMethod
       - deleteGatewayMethod
       - getreturnGatewayMethod
